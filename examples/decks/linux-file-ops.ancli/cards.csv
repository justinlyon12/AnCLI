key,title,command,description,setup,cleanup,prerequisites,verify,hint,solution,explanation,difficulty,tags
create-dir,"Create project directory","mkdir my_project","Create a new directory called my_project","rm -rf my_project 2>/dev/null || true","rm -rf my_project",,"ls | grep my_project","Use the mkdir command","mkdir my_project","Creates a directory named 'my_project' in the current location. No output on success follows Unix philosophy of 'silence is golden'. Use 'ls' to verify the directory was created.",1,"directories"
list-basic,"List directory contents","ls","View files and directories in current location",,"",,"ls","Basic listing command","ls","Shows files and directories in current directory. Each item on separate line. Hidden files (starting with .) are not shown unless -a flag used.",1,"files,listing"
enter-dir,"Enter directory","cd my_project && pwd","Change into the my_project directory and show current path","mkdir -p my_project","rm -rf my_project","create-dir","pwd","Use cd to change directory","cd my_project && pwd","Changes current working directory to my_project. The pwd command prints working directory, confirming location. Output shows full path like /workspace/my_project.",2,"directories,navigation"
create-file,"Create empty file","touch main.py && ls","Create an empty file named main.py","mkdir -p my_project && cd my_project","cd /workspace && rm -rf my_project","enter-dir","ls | grep main.py","Use touch command","touch main.py && ls","Creates empty file named main.py. Touch updates timestamps if file exists, creates new file if not. The ls shows main.py now appears in directory listing.",2,"files"
write-content,"Write to file","echo 'print(""Hello World"")' > main.py && cat main.py","Write Python code to main.py file","mkdir -p my_project && cd my_project","cd /workspace && rm -rf my_project","create-file","cat main.py","Use echo with output redirection","echo 'print(""Hello World"")' > main.py && cat main.py","Writes text to file using output redirection (>). The > operator overwrites file contents. cat displays file contents to verify. Output shows: print(""Hello World"")",3,"files,redirection"
append-content,"Append to file","echo '# Created by student' >> main.py && cat main.py","Add a comment line to the file","mkdir -p my_project && cd my_project && echo 'print(""Hello World"")' > main.py","cd /workspace && rm -rf my_project","write-content","cat main.py","Use >> for appending","echo '# Created by student' >> main.py && cat main.py","Appends text to end of file using >>. Unlike > which overwrites, >> adds to existing content. Output shows both original line and new comment.",3,"files,redirection"
make-executable,"Make file executable","chmod +x main.py && ls -l main.py","Add execute permission to the Python file","mkdir -p my_project && cd my_project && echo '#!/usr/bin/python3\nprint(""Hello World"")' > main.py","cd /workspace && rm -rf my_project","write-content","ls -l main.py | grep x","Use chmod command","chmod +x main.py | chmod 755 main.py | chmod u+x main.py","Adds execute permission to file. ls -l shows permissions as -rwxr--r-- where x indicates executable. Three permission groups: user(owner), group, other. 755 means rwxr-xr-x.",4,"permissions"
run-script,"Execute script","./main.py","Run the Python script","mkdir -p my_project && cd my_project && echo '#!/usr/bin/python3\nprint(""Script executed successfully!"")' > main.py && chmod +x main.py","cd /workspace && rm -rf my_project","make-executable","./main.py","Use ./ to run current directory script","./main.py","Executes script in current directory. The ./ prefix is required for security (prevents accidentally running system commands). Output: 'Script executed successfully!' The shebang (#!/usr/bin/python3) tells system which interpreter to use.",4,"execution,scripts"
list-detailed,"List with details","ls -l","Show detailed file information","mkdir -p my_project && cd my_project && touch file1.txt file2.py && chmod +x file2.py","cd /workspace && rm -rf my_project","enter-dir","ls -l","Use -l flag for long format","ls -l | ls --long","Shows detailed listing: permissions, links, owner, group, size, date, name. Format: -rwxr-xr-x 1 student student 25 Dec 8 10:30 file.txt. First character shows type (- for file, d for directory).",2,"files,listing"
list-hidden,"List hidden files","ls -la","Show all files including hidden ones","mkdir -p my_project && cd my_project && touch .hidden file.txt","cd /workspace && rm -rf my_project","enter-dir","ls -la | grep '.hidden'","Hidden files start with dot","ls -la | ls -a | ls --all","Shows all files including hidden ones starting with dot (.). Always includes . (current directory) and .. (parent directory). -l adds detailed format combining with -a flag.",3,"files,listing"
copy-file,"Copy file","cp main.py backup.py && ls","Create a backup copy of main.py","mkdir -p my_project && cd my_project && echo 'important content' > main.py","cd /workspace && rm -rf my_project","create-file","ls | grep backup.py","Use cp command","cp main.py backup.py","Copies main.py to new file backup.py. Both files now exist with identical content. Original file remains unchanged. Useful for creating backups before editing.",2,"files"
move-file,"Move file to subdirectory","mkdir src && mv main.py src/ && ls src/","Move main.py into src directory","mkdir -p my_project && cd my_project && echo 'content' > main.py","cd /workspace && rm -rf my_project","create-file","ls src/ && ls | grep -v main.py","Use mv command","mkdir src && mv main.py src/ && ls src/","Creates src directory then moves main.py into it. mv both moves and renames files. After moving, main.py only exists in src/ directory, not in original location.",3,"files,directories"
remove-file,"Remove file","rm backup.py && ls","Delete the backup file","mkdir -p my_project && cd my_project && touch backup.py","cd /workspace && rm -rf my_project","copy-file","ls | grep -v backup.py || echo 'File removed'","Use rm command","rm backup.py","Permanently deletes backup.py file. No output on success. Use ls to verify file is gone. Be careful - rm is permanent (no recycle bin in Unix).",2,"files"
create-nested,"Create nested directories","mkdir -p project/src/utils && ls -R","Create deep directory structure","rm -rf project 2>/dev/null || true","rm -rf project","create-dir","find project -type d","Use -p flag for parent directories","mkdir -p project/src/utils","Creates nested directories in one command. -p flag creates parent directories as needed and doesn't error if directories exist. ls -R shows recursive listing of all subdirectories.",3,"directories"
find-files,"Find Python files","find . -name '*.py' -type f","Locate all Python files recursively","mkdir -p test/src test/docs && touch test/src/app.py test/src/utils.py test/docs/README.md test/main.py","rm -rf test","create-dir","find . -name '*.py'","Use find with pattern matching","find . -name '*.py' -type f | find . -type f -name '*.py'","Searches recursively from current directory (.) for files (-type f) matching pattern *.py. Output shows full paths: ./test/main.py ./test/src/app.py. Powerful for locating files by name pattern.",4,"search,files"
check-permissions,"Check file permissions","ls -l main.py | cut -c1-10","Display permission bits for main.py","mkdir -p my_project && cd my_project && echo 'content' > main.py && chmod 644 main.py","cd /workspace && rm -rf my_project","create-file","ls -l main.py","Use ls -l and focus on first column","ls -l main.py | cut -c1-10","Shows permission string like -rw-r--r--. First char is file type (- = regular file, d = directory). Next 9 chars are permissions in groups of 3: owner, group, other. r=read(4), w=write(2), x=execute(1).",3,"permissions,files"
count-files,"Count files in directory","ls | wc -l","Count number of files and directories","mkdir -p test && touch test/file1 test/file2 test/file3","rm -rf test","create-dir","ls test && echo 'Count with: ls | wc -l'","Combine ls with wc command","ls | wc -l | find . -maxdepth 1 | wc -l","Pipes ls output to wc (word count) command. -l flag counts lines. Since ls shows one item per line, this counts files/directories. Output is just a number like: 3",2,"files,counting"
disk-usage,"Check disk usage","du -sh * 2>/dev/null || echo 'No files'","Display sizes of files and directories","mkdir -p big small && echo 'large content here' > big/file.txt && touch small/empty","rm -rf big small","create-dir","du -sh *","Use du command","du -sh * | du -h --summarize *","Shows disk usage in human-readable format. -s summarizes directories, -h uses K/M/G suffixes. Output like: 4.0K big, 4.0K small. Useful for finding what consumes disk space.",3,"disk,files"
create-symlink,"Create symbolic link","ln -s /workspace/my_project/main.py shortcut && ls -l shortcut","Create a symbolic link to main.py","mkdir -p my_project && echo 'print(""Hello"")' > my_project/main.py","rm -rf my_project shortcut","create-file","ls -l | grep shortcut","Use ln -s for symbolic links","ln -s /workspace/my_project/main.py shortcut","Creates symbolic link (symlink) named 'shortcut' pointing to main.py. ls -l shows shortcut -> /workspace/my_project/main.py. Link acts like original file but doesn't use extra disk space.",4,"files,links"
archive-create,"Create tar archive","tar -czf backup.tar.gz my_project","Archive directory into compressed file","mkdir -p my_project && echo 'data' > my_project/file.txt","rm -rf my_project backup.tar.gz","create-dir","ls -lh backup.tar.gz","Use tar command","tar -czf backup.tar.gz my_project | tar --create --gzip --file backup.tar.gz my_project","Creates compressed archive of my_project directory. -c creates, -z compresses with gzip, -f specifies filename. Results in backup.tar.gz file containing entire directory structure.",4,"archives,compression"
